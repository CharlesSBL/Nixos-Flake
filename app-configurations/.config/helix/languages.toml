# nix
[[language]]
name = "nix"
formatter = { command = "nixfmt", args = [] }

[language-server.nil]
command = "nil"
binary.path = "/etc/profiles/per-user/sach/bin/nil"
initialization_options.formatting.command = ["nixpkgs-fmt"]

[language-server.nixd]
command = "nixd"
binary.path = "nixd"
initialization_options.formatting.command = ["nixpkgs-fmt"]


# Rust
[[language]]
name = "rust"
scope = "source.rust"
auto-format = true
file-types = ["rs"]
injection-regex = "rust"
indent = { tab-width = 4, unit = "    " }
language-servers = ["rust-analyzer"]
formatter = { command = "rustfmt", args = [] }
roots = ["Cargo.toml", "Cargo.lock"]

# Language Server Configurations
[language-server.rust-analyzer]
command = "rust-analyzer"
binary.path = "rust-analyzer"
config.check.command = "clippy"
config.cargo.features = "all"

[[grammar]]
name = "rust"
source = "tree-sitter"

# C
[[language]]
name = "c"
scope = "source.c"
file-types = ["c", "h"]
indent = { tab-width = 4, unit = "    " }
language-servers = ["clangd"]
formatter = { command = "clang-format", args = [] }

# C++
[[language]]
name = "cpp"
scope = "source.cpp"
file-types = ["cpp", "hpp", "cxx", "hxx"]
indent = { tab-width = 4, unit = "    " }
language-servers = ["clangd"]
formatter = { command = "clang-format", args = [] }

[language-server.clangd]
command = "clangd"
args = []
binary.path = "clangd"


# Java
[[language]]
name = "java"
scope = "source.java"
file-types = ["java"]
indent = { tab-width = 4, unit = "    " }
language-servers = ["jdtls"]
formatter = { command = "google-java-format", args = [] }

[language-server.jdtls]
command = "jdtls"
args = []
binary.path = "jdtls"


# JavaScript
[[language]]
name = "javascript"
scope = "source.js"
file-types = ["js", "jsx"]
indent = { tab-width = 2, unit = "  " }
language-servers = ["typescript-language-server"]
formatter = { command = "prettier", args = ["--parser", "javascript"] }

# HTML
[[language]]
name = "html"
scope = "text.html"
file-types = ["html", "htm"]
block-comment-tokens = { start = "<!--", end = "-->" }
indent = { tab-width = 2, unit = "  " }
formatter = { command = "prettier", args = ["--parser", "html"] }

# CSS
[[language]]
name = "css"
scope = "source.css"
file-types = ["css"]
block-comment-tokens = { start = "/*", end = "*/" }
indent = { tab-width = 2, unit = "  " }
formatter = { command = "prettier", args = ["--parser", "css"] }

# React (JSX)
[[language]]
name = "react"
scope = "source.jsx"
file-types = ["jsx"]
indent = { tab-width = 2, unit = "  " }
language-servers = ["typescript-language-server"]
formatter = { command = "prettier", args = ["--parser", "jsx"] }

# C#
[[language]]
name = "csharp"
scope = "source.cs"
file-types = ["cs"]
indent = { tab-width = 4, unit = "    " }
language-servers = ["omnisharp"]
formatter = { command = "prettier", args = ["--parser", "csharp"] }

[language-server.omnisharp]
command = "omnisharp"


# Python
[[language]]
name = "python"
scope = "source.python"
file-types = ["py"]
indent = { tab-width = 4, unit = "    " }
language-servers = ["pyright"]
formatter = { command = "black", args = [] }

[language-server.pyright]
command = "pyright"
args = ["--stdio"]
binary.path = "pyright"


# Julia
[[language]]
name = "julia"
scope = "source.julia"
file-types = ["jl"]
indent = { tab-width = 4, unit = "    " }
language-servers = ["julia-lsp"]
formatter = { command = "prettier", args = ["--parser", "julia"] }


[language-server.julia-lsp]
command = "julia-lsp"


# Shell (sh)
[[language]]
name = "sh"
scope = "source.shell"
file-types = ["sh", "bash"]
shebangs = ["sh", "bash"]
indent = { tab-width = 4, unit = "    " }
language-servers = ["bash-language-server"]
formatter = { command = "prettier", args = ["--parser", "sh"] }

[language-server.bash-language-server]
command = "bash-language-server"
args = ["start"]


# Markdown (md)
[[language]]
name = "markdown"
scope = "text.md"
file-types = ["md", "markdown"]
block-comment-tokens = { start = "<!--", end = "-->" }
indent = { tab-width = 2, unit = "  " }

# TypeScript
[[language]]
name = "typescript"
scope = "source.ts"
file-types = ["ts", "tsx"]
indent = { tab-width = 2, unit = "  " }
language-servers = ["typescript-language-server"]
formatter = { command = "prettier", args = ["--parser", "typescript"] }

[language-server.typescript-language-server]
command = "typescript-language-server"
args = ["--stdio"]
binary.path = "typescript-language-server"

# PHP
[[language]]
name = "php"
scope = "source.php"
file-types = ["php"]
indent = { tab-width = 4, unit = "    " }
language-servers = ["intelephense"]


[language-server.intelephense]
command = "intelephense"
args = ["--stdio"]


# SQL
[[language]]
name = "sql"
scope = "source.sql"
file-types = ["sql"]
indent = { tab-width = 4, unit = "    " }
formatter = { command = "prettier", args = ["--parser", "sql"] }

# Go
[[language]]
name = "go"
scope = "source.go"
file-types = ["go"]
indent = { tab-width = 4, unit = "    " }
language-servers = ["gopls"]
formatter = { command = "prettier", args = ["--parser", "go"] }

[language-server.gopls]
command = "gopls"


# Swift
[[language]]
name = "swift"
scope = "source.swift"
file-types = ["swift"]
indent = { tab-width = 4, unit = "    " }
language-servers = ["sourcekit-lsp"]
formatter = { command = "prettier", args = ["--parser", "swift"] }


[language-server.sourcekit-lsp]
command = "sourcekit-lsp"


# Kotlin
[[language]]
name = "kotlin"
scope = "source.kt"
file-types = ["kt", "kts"]
indent = { tab-width = 4, unit = "    " }
language-servers = ["kotlin-language-server"]
formatter = { command = "prettier", args = ["--parser", "kotlin"] }


[language-server.kotlin-language-server]
command = "kotlin-language-server"
